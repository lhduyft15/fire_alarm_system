// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DeviceConfigModule_ProvideDeviceConfigPresenterFactory
    implements Factory<DeviceConfigPresenter> {
  private final DeviceConfigModule module;

  private final Provider<DeviceConfigView> deviceConfigViewProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  public DeviceConfigModule_ProvideDeviceConfigPresenterFactory(
      DeviceConfigModule module,
      Provider<DeviceConfigView> deviceConfigViewProvider,
      Provider<MeshLogic> meshLogicProvider) {
    this.module = module;
    this.deviceConfigViewProvider = deviceConfigViewProvider;
    this.meshLogicProvider = meshLogicProvider;
  }

  @Override
  public DeviceConfigPresenter get() {
    return provideInstance(module, deviceConfigViewProvider, meshLogicProvider);
  }

  public static DeviceConfigPresenter provideInstance(
      DeviceConfigModule module,
      Provider<DeviceConfigView> deviceConfigViewProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return proxyProvideDeviceConfigPresenter(
        module, deviceConfigViewProvider.get(), meshLogicProvider.get());
  }

  public static DeviceConfigModule_ProvideDeviceConfigPresenterFactory create(
      DeviceConfigModule module,
      Provider<DeviceConfigView> deviceConfigViewProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return new DeviceConfigModule_ProvideDeviceConfigPresenterFactory(
        module, deviceConfigViewProvider, meshLogicProvider);
  }

  public static DeviceConfigPresenter proxyProvideDeviceConfigPresenter(
      DeviceConfigModule instance, DeviceConfigView deviceConfigView, MeshLogic meshLogic) {
    return Preconditions.checkNotNull(
        instance.provideDeviceConfigPresenter(deviceConfigView, meshLogic),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
