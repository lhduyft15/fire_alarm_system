// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Activities.Main;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainActivityModule_ProvideMainActivityPresenterFactory
    implements Factory<MainActivityPresenter> {
  private final MainActivityModule module;

  private final Provider<MainActivityView> mainActivityViewProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  public MainActivityModule_ProvideMainActivityPresenterFactory(
      MainActivityModule module,
      Provider<MainActivityView> mainActivityViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider) {
    this.module = module;
    this.mainActivityViewProvider = mainActivityViewProvider;
    this.meshLogicProvider = meshLogicProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
  }

  @Override
  public MainActivityPresenter get() {
    return provideInstance(
        module, mainActivityViewProvider, meshLogicProvider, networkConnectionLogicProvider);
  }

  public static MainActivityPresenter provideInstance(
      MainActivityModule module,
      Provider<MainActivityView> mainActivityViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider) {
    return proxyProvideMainActivityPresenter(
        module,
        mainActivityViewProvider.get(),
        meshLogicProvider.get(),
        networkConnectionLogicProvider.get());
  }

  public static MainActivityModule_ProvideMainActivityPresenterFactory create(
      MainActivityModule module,
      Provider<MainActivityView> mainActivityViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider) {
    return new MainActivityModule_ProvideMainActivityPresenterFactory(
        module, mainActivityViewProvider, meshLogicProvider, networkConnectionLogicProvider);
  }

  public static MainActivityPresenter proxyProvideMainActivityPresenter(
      MainActivityModule instance,
      MainActivityView mainActivityView,
      MeshLogic meshLogic,
      NetworkConnectionLogic networkConnectionLogic) {
    return Preconditions.checkNotNull(
        instance.provideMainActivityPresenter(mainActivityView, meshLogic, networkConnectionLogic),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
