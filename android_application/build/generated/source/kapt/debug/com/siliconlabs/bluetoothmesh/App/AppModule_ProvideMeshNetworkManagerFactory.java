// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNetworkManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideMeshNetworkManagerFactory
    implements Factory<MeshNetworkManager> {
  private final AppModule module;

  private final Provider<MeshLogic> meshLogicProvider;

  public AppModule_ProvideMeshNetworkManagerFactory(
      AppModule module, Provider<MeshLogic> meshLogicProvider) {
    this.module = module;
    this.meshLogicProvider = meshLogicProvider;
  }

  @Override
  public MeshNetworkManager get() {
    return provideInstance(module, meshLogicProvider);
  }

  public static MeshNetworkManager provideInstance(
      AppModule module, Provider<MeshLogic> meshLogicProvider) {
    return proxyProvideMeshNetworkManager(module, meshLogicProvider.get());
  }

  public static AppModule_ProvideMeshNetworkManagerFactory create(
      AppModule module, Provider<MeshLogic> meshLogicProvider) {
    return new AppModule_ProvideMeshNetworkManagerFactory(module, meshLogicProvider);
  }

  public static MeshNetworkManager proxyProvideMeshNetworkManager(
      AppModule instance, MeshLogic meshLogic) {
    return Preconditions.checkNotNull(
        instance.provideMeshNetworkManager(meshLogic),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
