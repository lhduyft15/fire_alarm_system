// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.Network;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkModule_ProvideNetworkViewFactory implements Factory<NetworkView> {
  private final NetworkModule module;

  private final Provider<NetworkFragment> networkFragmentProvider;

  public NetworkModule_ProvideNetworkViewFactory(
      NetworkModule module, Provider<NetworkFragment> networkFragmentProvider) {
    this.module = module;
    this.networkFragmentProvider = networkFragmentProvider;
  }

  @Override
  public NetworkView get() {
    return provideInstance(module, networkFragmentProvider);
  }

  public static NetworkView provideInstance(
      NetworkModule module, Provider<NetworkFragment> networkFragmentProvider) {
    return proxyProvideNetworkView(module, networkFragmentProvider.get());
  }

  public static NetworkModule_ProvideNetworkViewFactory create(
      NetworkModule module, Provider<NetworkFragment> networkFragmentProvider) {
    return new NetworkModule_ProvideNetworkViewFactory(module, networkFragmentProvider);
  }

  public static NetworkView proxyProvideNetworkView(
      NetworkModule instance, NetworkFragment networkFragment) {
    return Preconditions.checkNotNull(
        instance.provideNetworkView(networkFragment),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
