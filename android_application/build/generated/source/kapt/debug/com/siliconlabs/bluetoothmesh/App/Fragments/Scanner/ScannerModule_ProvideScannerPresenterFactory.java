// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.Scanner;

import android.content.Context;
import com.siliconlabs.bluetoothmesh.App.Logic.BluetoothScanner;
import com.siliconlabs.bluetoothmesh.App.Logic.BluetoothStateReceiver;
import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Models.ProvisioningModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ScannerModule_ProvideScannerPresenterFactory
    implements Factory<ScannerPresenter> {
  private final ScannerModule module;

  private final Provider<ScannerView> scannerViewProvider;

  private final Provider<Context> contextProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  private final Provider<ProvisioningModel> provisioningModelProvider;

  private final Provider<BluetoothScanner> bluetoothLeScanLogicProvider;

  private final Provider<BluetoothStateReceiver> bluetoothStateReceiverProvider;

  public ScannerModule_ProvideScannerPresenterFactory(
      ScannerModule module,
      Provider<ScannerView> scannerViewProvider,
      Provider<Context> contextProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<ProvisioningModel> provisioningModelProvider,
      Provider<BluetoothScanner> bluetoothLeScanLogicProvider,
      Provider<BluetoothStateReceiver> bluetoothStateReceiverProvider) {
    this.module = module;
    this.scannerViewProvider = scannerViewProvider;
    this.contextProvider = contextProvider;
    this.meshLogicProvider = meshLogicProvider;
    this.provisioningModelProvider = provisioningModelProvider;
    this.bluetoothLeScanLogicProvider = bluetoothLeScanLogicProvider;
    this.bluetoothStateReceiverProvider = bluetoothStateReceiverProvider;
  }

  @Override
  public ScannerPresenter get() {
    return provideInstance(
        module,
        scannerViewProvider,
        contextProvider,
        meshLogicProvider,
        provisioningModelProvider,
        bluetoothLeScanLogicProvider,
        bluetoothStateReceiverProvider);
  }

  public static ScannerPresenter provideInstance(
      ScannerModule module,
      Provider<ScannerView> scannerViewProvider,
      Provider<Context> contextProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<ProvisioningModel> provisioningModelProvider,
      Provider<BluetoothScanner> bluetoothLeScanLogicProvider,
      Provider<BluetoothStateReceiver> bluetoothStateReceiverProvider) {
    return proxyProvideScannerPresenter(
        module,
        scannerViewProvider.get(),
        contextProvider.get(),
        meshLogicProvider.get(),
        provisioningModelProvider.get(),
        bluetoothLeScanLogicProvider.get(),
        bluetoothStateReceiverProvider.get());
  }

  public static ScannerModule_ProvideScannerPresenterFactory create(
      ScannerModule module,
      Provider<ScannerView> scannerViewProvider,
      Provider<Context> contextProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<ProvisioningModel> provisioningModelProvider,
      Provider<BluetoothScanner> bluetoothLeScanLogicProvider,
      Provider<BluetoothStateReceiver> bluetoothStateReceiverProvider) {
    return new ScannerModule_ProvideScannerPresenterFactory(
        module,
        scannerViewProvider,
        contextProvider,
        meshLogicProvider,
        provisioningModelProvider,
        bluetoothLeScanLogicProvider,
        bluetoothStateReceiverProvider);
  }

  public static ScannerPresenter proxyProvideScannerPresenter(
      ScannerModule instance,
      ScannerView scannerView,
      Context context,
      MeshLogic meshLogic,
      ProvisioningModel provisioningModel,
      BluetoothScanner bluetoothLeScanLogic,
      BluetoothStateReceiver bluetoothStateReceiver) {
    return Preconditions.checkNotNull(
        instance.provideScannerPresenter(
            scannerView,
            context,
            meshLogic,
            provisioningModel,
            bluetoothLeScanLogic,
            bluetoothStateReceiver),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
