// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.Network;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkModule_ProvideNetworkPresenterFactory
    implements Factory<NetworkPresenter> {
  private final NetworkModule module;

  private final Provider<NetworkView> networkViewProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  public NetworkModule_ProvideNetworkPresenterFactory(
      NetworkModule module,
      Provider<NetworkView> networkViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    this.module = module;
    this.networkViewProvider = networkViewProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
    this.meshLogicProvider = meshLogicProvider;
  }

  @Override
  public NetworkPresenter get() {
    return provideInstance(
        module, networkViewProvider, networkConnectionLogicProvider, meshLogicProvider);
  }

  public static NetworkPresenter provideInstance(
      NetworkModule module,
      Provider<NetworkView> networkViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return proxyProvideNetworkPresenter(
        module,
        networkViewProvider.get(),
        networkConnectionLogicProvider.get(),
        meshLogicProvider.get());
  }

  public static NetworkModule_ProvideNetworkPresenterFactory create(
      NetworkModule module,
      Provider<NetworkView> networkViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return new NetworkModule_ProvideNetworkPresenterFactory(
        module, networkViewProvider, networkConnectionLogicProvider, meshLogicProvider);
  }

  public static NetworkPresenter proxyProvideNetworkPresenter(
      NetworkModule instance,
      NetworkView networkView,
      NetworkConnectionLogic networkConnectionLogic,
      MeshLogic meshLogic) {
    return Preconditions.checkNotNull(
        instance.provideNetworkPresenter(networkView, networkConnectionLogic, meshLogic),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
