// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.support.v4.app.Fragment;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivity;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivityModule;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivityModule_ProvideMainActivityPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivityModule_ProvideMainActivityViewFactory;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivityPresenter;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivityView;
import com.siliconlabs.bluetoothmesh.App.Activities.Main.MainActivity_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Database.DeviceFunctionalityDb;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupModule_ProvideControlGroupPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupModule_ProvideControlGroupViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup.ControlGroupView;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigModule_ProvideDeviceConfigPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigModule_ProvideDeviceConfigViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Config.DeviceConfigView;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogModule_ProvideDeviceDialogPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogModule_ProvideDeviceDialogViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.DeviceDialogView;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoModule_ProvideDeviceInfoPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoModule_ProvideDeviceInfoViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog.Info.DeviceInfoView;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListModule_ProvideDeviceListPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListModule_ProvideDeviceListViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList.DeviceListView;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListModule_ProvideGroupListPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListModule_ProvideGroupListViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.GroupList.GroupListView;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragmentModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragmentModule_ProvideMainFragmentPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragmentModule_ProvideMainFragmentViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragmentPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragmentView;
import com.siliconlabs.bluetoothmesh.App.Fragments.MainFragment.MainFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkModule_ProvideNetworkPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkModule_ProvideNetworkViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.Network.NetworkView;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListModule_ProvideNetworkListPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListModule_ProvideNetworkListViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList.NetworkListView;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerFragment;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerFragment_MembersInjector;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerModule;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerModule_ProvideScannerPresenterFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerModule_ProvideScannerViewFactory;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerPresenter;
import com.siliconlabs.bluetoothmesh.App.Fragments.Scanner.ScannerView;
import com.siliconlabs.bluetoothmesh.App.Logic.BluetoothScanner;
import com.siliconlabs.bluetoothmesh.App.Logic.BluetoothStateReceiver;
import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNetworkManager;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNodeManager;
import com.siliconlabs.bluetoothmesh.App.Models.ProvisioningModel;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindMainFragment.MainFragmentSubcomponent.Builder>
      mainFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent.Builder>
      networkFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent.Builder>
      deviceListFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent.Builder>
      groupListFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent.Builder>
      scannerFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent.Builder>
      networkListFragmentSubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent.Builder>
      deviceDialogFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent.Builder>
      deviceInfoFragmentSubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent.Builder>
      deviceConfigFragmentSubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent.Builder>
      controlGroupFragmentSubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<MeshLogic> provideMeshLogicProvider;

  private Provider<BluetoothStateReceiver> provideBluetoothStateReceiverProvider;

  private Provider<BluetoothScanner> provideBluetoothScannerProvider;

  private Provider<NetworkConnectionLogic> provideNetworkConnectionLogicProvider;

  private Provider<DeviceFunctionalityDb> provideDeviceFunctionalityDbProvider;

  private Provider<MeshNodeManager> provideMeshNodeManagerProvider;

  private Provider<MeshNetworkManager> provideMeshNetworkManagerProvider;

  private Provider<ProvisioningModel> provideProvisioningModelProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.mainFragmentSubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainFragment.MainFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainFragment.MainFragmentSubcomponent.Builder get() {
            return new MainFragmentSubcomponentBuilder();
          }
        };
    this.networkFragmentSubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent.Builder get() {
            return new NetworkFragmentSubcomponentBuilder();
          }
        };
    this.deviceListFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent.Builder
              get() {
            return new DeviceListFragmentSubcomponentBuilder();
          }
        };
    this.groupListFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent.Builder get() {
            return new GroupListFragmentSubcomponentBuilder();
          }
        };
    this.scannerFragmentSubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent.Builder get() {
            return new ScannerFragmentSubcomponentBuilder();
          }
        };
    this.networkListFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent.Builder
              get() {
            return new NetworkListFragmentSubcomponentBuilder();
          }
        };
    this.deviceDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent.Builder
              get() {
            return new DeviceDialogFragmentSubcomponentBuilder();
          }
        };
    this.deviceInfoFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent.Builder
              get() {
            return new DeviceInfoFragmentSubcomponentBuilder();
          }
        };
    this.deviceConfigFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent.Builder
              get() {
            return new DeviceConfigFragmentSubcomponentBuilder();
          }
        };
    this.controlGroupFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent.Builder
              get() {
            return new ControlGroupFragmentSubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(builder.appModule, applicationProvider));
    this.provideMeshLogicProvider =
        DoubleCheck.provider(
            AppModule_ProvideMeshLogicFactory.create(builder.appModule, provideContextProvider));
    this.provideBluetoothStateReceiverProvider =
        DoubleCheck.provider(
            AppModule_ProvideBluetoothStateReceiverFactory.create(
                builder.appModule, provideContextProvider));
    this.provideBluetoothScannerProvider =
        DoubleCheck.provider(
            AppModule_ProvideBluetoothScannerFactory.create(
                builder.appModule, provideBluetoothStateReceiverProvider));
    this.provideNetworkConnectionLogicProvider =
        DoubleCheck.provider(
            AppModule_ProvideNetworkConnectionLogicFactory.create(
                builder.appModule,
                provideContextProvider,
                provideMeshLogicProvider,
                provideBluetoothScannerProvider));
    this.provideDeviceFunctionalityDbProvider =
        DoubleCheck.provider(
            AppModule_ProvideDeviceFunctionalityDbFactory.create(
                builder.appModule, provideContextProvider));
    this.provideMeshNodeManagerProvider =
        DoubleCheck.provider(
            AppModule_ProvideMeshNodeManagerFactory.create(
                builder.appModule, provideDeviceFunctionalityDbProvider));
    this.provideMeshNetworkManagerProvider =
        DoubleCheck.provider(
            AppModule_ProvideMeshNetworkManagerFactory.create(
                builder.appModule, provideMeshLogicProvider));
    this.provideProvisioningModelProvider =
        DoubleCheck.provider(
            AppModule_ProvideProvisioningModelFactory.create(
                builder.appModule, provideMeshLogicProvider, provideMeshNodeManagerProvider));
  }

  @Override
  public void inject(MeshApplication app) {
    injectMeshApplication(app);
  }

  @Override
  public void inject(ProvisioningModel provisioningModel) {}

  private MeshApplication injectMeshApplication(MeshApplication instance) {
    MeshApplication_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainActivityModule mainActivityModule;

    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent build() {
      if (mainActivityModule == null) {
        this.mainActivityModule = new MainActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private MainActivityModule mainActivityModule;

    private MainActivity seedInstance;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private DispatchingAndroidInjector<android.app.Fragment>
        getDispatchingAndroidInjectorOfFragment2() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends android.app.Fragment>,
                  Provider<AndroidInjector.Factory<? extends android.app.Fragment>>>
                  emptyMap());
    }

    private MainActivityView getMainActivityView() {
      return MainActivityModule_ProvideMainActivityViewFactory.proxyProvideMainActivityView(
          mainActivityModule, seedInstance);
    }

    private MainActivityPresenter getMainActivityPresenter() {
      return MainActivityModule_ProvideMainActivityPresenterFactory
          .proxyProvideMainActivityPresenter(
              mainActivityModule,
              getMainActivityView(),
              DaggerAppComponent.this.provideMeshLogicProvider.get(),
              DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.mainActivityModule = builder.mainActivityModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment2());
      MainActivity_MembersInjector.injectMainActivityPresenter(
          instance, getMainActivityPresenter());
      return instance;
    }
  }

  private final class MainFragmentSubcomponentBuilder
      extends ActivityBuilder_BindMainFragment.MainFragmentSubcomponent.Builder {
    private MainFragmentModule mainFragmentModule;

    private MainFragment seedInstance;

    @Override
    public ActivityBuilder_BindMainFragment.MainFragmentSubcomponent build() {
      if (mainFragmentModule == null) {
        this.mainFragmentModule = new MainFragmentModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainFragment.class.getCanonicalName() + " must be set");
      }
      return new MainFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainFragmentSubcomponentImpl
      implements ActivityBuilder_BindMainFragment.MainFragmentSubcomponent {
    private MainFragmentModule mainFragmentModule;

    private MainFragment seedInstance;

    private MainFragmentSubcomponentImpl(MainFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private MainFragmentView getMainFragmentView() {
      return MainFragmentModule_ProvideMainFragmentViewFactory.proxyProvideMainFragmentView(
          mainFragmentModule, seedInstance);
    }

    private MainFragmentPresenter getMainFragmentPresenter() {
      return MainFragmentModule_ProvideMainFragmentPresenterFactory
          .proxyProvideMainFragmentPresenter(
              mainFragmentModule,
              getMainFragmentView(),
              DaggerAppComponent.this.provideBluetoothStateReceiverProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainFragmentSubcomponentBuilder builder) {
      this.mainFragmentModule = builder.mainFragmentModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(MainFragment arg0) {
      injectMainFragment(arg0);
    }

    private MainFragment injectMainFragment(MainFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainFragment_MembersInjector.injectMainFragmentPresenter(
          instance, getMainFragmentPresenter());
      return instance;
    }
  }

  private final class NetworkFragmentSubcomponentBuilder
      extends ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent.Builder {
    private NetworkModule networkModule;

    private NetworkFragment seedInstance;

    @Override
    public ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(NetworkFragment.class.getCanonicalName() + " must be set");
      }
      return new NetworkFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(NetworkFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class NetworkFragmentSubcomponentImpl
      implements ActivityBuilder_BindNetworkFragment.NetworkFragmentSubcomponent {
    private NetworkModule networkModule;

    private NetworkFragment seedInstance;

    private NetworkFragmentSubcomponentImpl(NetworkFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private NetworkView getNetworkView() {
      return NetworkModule_ProvideNetworkViewFactory.proxyProvideNetworkView(
          networkModule, seedInstance);
    }

    private NetworkPresenter getNetworkPresenter() {
      return NetworkModule_ProvideNetworkPresenterFactory.proxyProvideNetworkPresenter(
          networkModule,
          getNetworkView(),
          DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get(),
          DaggerAppComponent.this.provideMeshLogicProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NetworkFragmentSubcomponentBuilder builder) {
      this.networkModule = builder.networkModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(NetworkFragment arg0) {
      injectNetworkFragment(arg0);
    }

    private NetworkFragment injectNetworkFragment(NetworkFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      NetworkFragment_MembersInjector.injectNetworkPresenter(instance, getNetworkPresenter());
      return instance;
    }
  }

  private final class DeviceListFragmentSubcomponentBuilder
      extends ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent.Builder {
    private DeviceListModule deviceListModule;

    private DeviceListFragment seedInstance;

    @Override
    public ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent build() {
      if (deviceListModule == null) {
        this.deviceListModule = new DeviceListModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            DeviceListFragment.class.getCanonicalName() + " must be set");
      }
      return new DeviceListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DeviceListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DeviceListFragmentSubcomponentImpl
      implements ActivityBuilder_BindDeviceListFragment.DeviceListFragmentSubcomponent {
    private DeviceListModule deviceListModule;

    private DeviceListFragment seedInstance;

    private DeviceListFragmentSubcomponentImpl(DeviceListFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private DeviceListView getDeviceListView() {
      return DeviceListModule_ProvideDeviceListViewFactory.proxyProvideDeviceListView(
          deviceListModule, seedInstance);
    }

    private DeviceListPresenter getDeviceListPresenter() {
      return DeviceListModule_ProvideDeviceListPresenterFactory.proxyProvideDeviceListPresenter(
          deviceListModule,
          getDeviceListView(),
          DaggerAppComponent.this.provideMeshLogicProvider.get(),
          DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get(),
          DaggerAppComponent.this.provideMeshNodeManagerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DeviceListFragmentSubcomponentBuilder builder) {
      this.deviceListModule = builder.deviceListModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(DeviceListFragment arg0) {
      injectDeviceListFragment(arg0);
    }

    private DeviceListFragment injectDeviceListFragment(DeviceListFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DeviceListFragment_MembersInjector.injectDeviceListPresenter(
          instance, getDeviceListPresenter());
      return instance;
    }
  }

  private final class GroupListFragmentSubcomponentBuilder
      extends ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent.Builder {
    private GroupListModule groupListModule;

    private GroupListFragment seedInstance;

    @Override
    public ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent build() {
      if (groupListModule == null) {
        this.groupListModule = new GroupListModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            GroupListFragment.class.getCanonicalName() + " must be set");
      }
      return new GroupListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(GroupListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class GroupListFragmentSubcomponentImpl
      implements ActivityBuilder_BindGroupListFragment.GroupListFragmentSubcomponent {
    private GroupListModule groupListModule;

    private GroupListFragment seedInstance;

    private GroupListFragmentSubcomponentImpl(GroupListFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private GroupListView getGroupListView() {
      return GroupListModule_ProvideGroupListViewFactory.proxyProvideGroupListView(
          groupListModule, seedInstance);
    }

    private GroupListPresenter getGroupListPresenter() {
      return GroupListModule_ProvideGroupListPresenterFactory.proxyProvideGroupListPresenter(
          groupListModule,
          getGroupListView(),
          DaggerAppComponent.this.provideMeshLogicProvider.get(),
          DaggerAppComponent.this.provideMeshNetworkManagerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final GroupListFragmentSubcomponentBuilder builder) {
      this.groupListModule = builder.groupListModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(GroupListFragment arg0) {
      injectGroupListFragment(arg0);
    }

    private GroupListFragment injectGroupListFragment(GroupListFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      GroupListFragment_MembersInjector.injectGroupListPresenter(instance, getGroupListPresenter());
      return instance;
    }
  }

  private final class ScannerFragmentSubcomponentBuilder
      extends ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent.Builder {
    private ScannerModule scannerModule;

    private ScannerFragment seedInstance;

    @Override
    public ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent build() {
      if (scannerModule == null) {
        this.scannerModule = new ScannerModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(ScannerFragment.class.getCanonicalName() + " must be set");
      }
      return new ScannerFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ScannerFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ScannerFragmentSubcomponentImpl
      implements ActivityBuilder_BindScannerFragment.ScannerFragmentSubcomponent {
    private ScannerModule scannerModule;

    private ScannerFragment seedInstance;

    private ScannerFragmentSubcomponentImpl(ScannerFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private ScannerView getScannerView() {
      return ScannerModule_ProvideScannerViewFactory.proxyProvideScannerView(
          scannerModule, seedInstance);
    }

    private ScannerPresenter getScannerPresenter() {
      return ScannerModule_ProvideScannerPresenterFactory.proxyProvideScannerPresenter(
          scannerModule,
          getScannerView(),
          DaggerAppComponent.this.provideContextProvider.get(),
          DaggerAppComponent.this.provideMeshLogicProvider.get(),
          DaggerAppComponent.this.provideProvisioningModelProvider.get(),
          DaggerAppComponent.this.provideBluetoothScannerProvider.get(),
          DaggerAppComponent.this.provideBluetoothStateReceiverProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ScannerFragmentSubcomponentBuilder builder) {
      this.scannerModule = builder.scannerModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(ScannerFragment arg0) {
      injectScannerFragment(arg0);
    }

    private ScannerFragment injectScannerFragment(ScannerFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ScannerFragment_MembersInjector.injectScannerPresenter(instance, getScannerPresenter());
      return instance;
    }
  }

  private final class NetworkListFragmentSubcomponentBuilder
      extends ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent.Builder {
    private NetworkListModule networkListModule;

    private NetworkListFragment seedInstance;

    @Override
    public ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent build() {
      if (networkListModule == null) {
        this.networkListModule = new NetworkListModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            NetworkListFragment.class.getCanonicalName() + " must be set");
      }
      return new NetworkListFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(NetworkListFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class NetworkListFragmentSubcomponentImpl
      implements ActivityBuilder_BindNetworkListFragment.NetworkListFragmentSubcomponent {
    private NetworkListModule networkListModule;

    private NetworkListFragment seedInstance;

    private NetworkListFragmentSubcomponentImpl(NetworkListFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private NetworkListView getNetworkListView() {
      return NetworkListModule_ProvideNetworkListViewFactory.proxyProvideNetworkListView(
          networkListModule, seedInstance);
    }

    private NetworkListPresenter getNetworkListPresenter() {
      return NetworkListModule_ProvideNetworkListPresenterFactory.proxyProvideNetworkListPresenter(
          networkListModule,
          getNetworkListView(),
          DaggerAppComponent.this.provideMeshLogicProvider.get(),
          DaggerAppComponent.this.provideMeshNetworkManagerProvider.get(),
          DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get(),
          DaggerAppComponent.this.provideMeshNodeManagerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NetworkListFragmentSubcomponentBuilder builder) {
      this.networkListModule = builder.networkListModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(NetworkListFragment arg0) {
      injectNetworkListFragment(arg0);
    }

    private NetworkListFragment injectNetworkListFragment(NetworkListFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      NetworkListFragment_MembersInjector.injectNetworkListPresenter(
          instance, getNetworkListPresenter());
      return instance;
    }
  }

  private final class DeviceDialogFragmentSubcomponentBuilder
      extends ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent.Builder {
    private DeviceDialogModule deviceDialogModule;

    private DeviceDialogFragment seedInstance;

    @Override
    public ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent build() {
      if (deviceDialogModule == null) {
        this.deviceDialogModule = new DeviceDialogModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            DeviceDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new DeviceDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DeviceDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DeviceDialogFragmentSubcomponentImpl
      implements ActivityBuilder_BindDeviceDialogFragment.DeviceDialogFragmentSubcomponent {
    private DeviceDialogModule deviceDialogModule;

    private DeviceDialogFragment seedInstance;

    private DeviceDialogFragmentSubcomponentImpl(DeviceDialogFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private DeviceDialogView getDeviceDialogView() {
      return DeviceDialogModule_ProvideDeviceDialogViewFactory.proxyProvideDeviceDialogView(
          deviceDialogModule, seedInstance);
    }

    private DeviceDialogPresenter getDeviceDialogPresenter() {
      return DeviceDialogModule_ProvideDeviceDialogPresenterFactory
          .proxyProvideDeviceDialogPresenter(
              deviceDialogModule,
              getDeviceDialogView(),
              DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get(),
              DaggerAppComponent.this.provideMeshLogicProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DeviceDialogFragmentSubcomponentBuilder builder) {
      this.deviceDialogModule = builder.deviceDialogModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(DeviceDialogFragment arg0) {
      injectDeviceDialogFragment(arg0);
    }

    private DeviceDialogFragment injectDeviceDialogFragment(DeviceDialogFragment instance) {
      DeviceDialogFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DeviceDialogFragment_MembersInjector.injectDeviceDialogPresenter(
          instance, getDeviceDialogPresenter());
      return instance;
    }
  }

  private final class DeviceInfoFragmentSubcomponentBuilder
      extends ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent.Builder {
    private DeviceInfoModule deviceInfoModule;

    private DeviceInfoFragment seedInstance;

    @Override
    public ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent build() {
      if (deviceInfoModule == null) {
        this.deviceInfoModule = new DeviceInfoModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            DeviceInfoFragment.class.getCanonicalName() + " must be set");
      }
      return new DeviceInfoFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DeviceInfoFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DeviceInfoFragmentSubcomponentImpl
      implements ActivityBuilder_BindDeviceInfoFragment.DeviceInfoFragmentSubcomponent {
    private DeviceInfoModule deviceInfoModule;

    private DeviceInfoFragment seedInstance;

    private DeviceInfoFragmentSubcomponentImpl(DeviceInfoFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private DeviceInfoView getDeviceInfoView() {
      return DeviceInfoModule_ProvideDeviceInfoViewFactory.proxyProvideDeviceInfoView(
          deviceInfoModule, seedInstance);
    }

    private DeviceInfoPresenter getDeviceInfoPresenter() {
      return DeviceInfoModule_ProvideDeviceInfoPresenterFactory.proxyProvideDeviceInfoPresenter(
          deviceInfoModule,
          getDeviceInfoView(),
          DaggerAppComponent.this.provideMeshLogicProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DeviceInfoFragmentSubcomponentBuilder builder) {
      this.deviceInfoModule = builder.deviceInfoModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(DeviceInfoFragment arg0) {
      injectDeviceInfoFragment(arg0);
    }

    private DeviceInfoFragment injectDeviceInfoFragment(DeviceInfoFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DeviceInfoFragment_MembersInjector.injectDeviceInfoPresenter(
          instance, getDeviceInfoPresenter());
      return instance;
    }
  }

  private final class DeviceConfigFragmentSubcomponentBuilder
      extends ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent.Builder {
    private DeviceConfigModule deviceConfigModule;

    private DeviceConfigFragment seedInstance;

    @Override
    public ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent build() {
      if (deviceConfigModule == null) {
        this.deviceConfigModule = new DeviceConfigModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            DeviceConfigFragment.class.getCanonicalName() + " must be set");
      }
      return new DeviceConfigFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DeviceConfigFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DeviceConfigFragmentSubcomponentImpl
      implements ActivityBuilder_BindDeviceConfigFragment.DeviceConfigFragmentSubcomponent {
    private DeviceConfigModule deviceConfigModule;

    private DeviceConfigFragment seedInstance;

    private DeviceConfigFragmentSubcomponentImpl(DeviceConfigFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private DeviceConfigView getDeviceConfigView() {
      return DeviceConfigModule_ProvideDeviceConfigViewFactory.proxyProvideDeviceConfigView(
          deviceConfigModule, seedInstance);
    }

    private DeviceConfigPresenter getDeviceConfigPresenter() {
      return DeviceConfigModule_ProvideDeviceConfigPresenterFactory
          .proxyProvideDeviceConfigPresenter(
              deviceConfigModule,
              getDeviceConfigView(),
              DaggerAppComponent.this.provideMeshLogicProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DeviceConfigFragmentSubcomponentBuilder builder) {
      this.deviceConfigModule = builder.deviceConfigModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(DeviceConfigFragment arg0) {
      injectDeviceConfigFragment(arg0);
    }

    private DeviceConfigFragment injectDeviceConfigFragment(DeviceConfigFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DeviceConfigFragment_MembersInjector.injectDeviceConfigPresenter(
          instance, getDeviceConfigPresenter());
      return instance;
    }
  }

  private final class ControlGroupFragmentSubcomponentBuilder
      extends ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent.Builder {
    private ControlGroupModule controlGroupModule;

    private ControlGroupFragment seedInstance;

    @Override
    public ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent build() {
      if (controlGroupModule == null) {
        this.controlGroupModule = new ControlGroupModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            ControlGroupFragment.class.getCanonicalName() + " must be set");
      }
      return new ControlGroupFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ControlGroupFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ControlGroupFragmentSubcomponentImpl
      implements ActivityBuilder_BindControlGroupFragment.ControlGroupFragmentSubcomponent {
    private ControlGroupModule controlGroupModule;

    private ControlGroupFragment seedInstance;

    private ControlGroupFragmentSubcomponentImpl(ControlGroupFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(10)
          .put(
              MainFragment.class,
              (Provider) DaggerAppComponent.this.mainFragmentSubcomponentBuilderProvider)
          .put(
              NetworkFragment.class,
              (Provider) DaggerAppComponent.this.networkFragmentSubcomponentBuilderProvider)
          .put(
              DeviceListFragment.class,
              (Provider) DaggerAppComponent.this.deviceListFragmentSubcomponentBuilderProvider)
          .put(
              GroupListFragment.class,
              (Provider) DaggerAppComponent.this.groupListFragmentSubcomponentBuilderProvider)
          .put(
              ScannerFragment.class,
              (Provider) DaggerAppComponent.this.scannerFragmentSubcomponentBuilderProvider)
          .put(
              NetworkListFragment.class,
              (Provider) DaggerAppComponent.this.networkListFragmentSubcomponentBuilderProvider)
          .put(
              DeviceDialogFragment.class,
              (Provider) DaggerAppComponent.this.deviceDialogFragmentSubcomponentBuilderProvider)
          .put(
              DeviceInfoFragment.class,
              (Provider) DaggerAppComponent.this.deviceInfoFragmentSubcomponentBuilderProvider)
          .put(
              DeviceConfigFragment.class,
              (Provider) DaggerAppComponent.this.deviceConfigFragmentSubcomponentBuilderProvider)
          .put(
              ControlGroupFragment.class,
              (Provider) DaggerAppComponent.this.controlGroupFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private ControlGroupView getControlGroupView() {
      return ControlGroupModule_ProvideControlGroupViewFactory.proxyProvideControlGroupView(
          controlGroupModule, seedInstance);
    }

    private ControlGroupPresenter getControlGroupPresenter() {
      return ControlGroupModule_ProvideControlGroupPresenterFactory
          .proxyProvideControlGroupPresenter(
              controlGroupModule,
              getControlGroupView(),
              DaggerAppComponent.this.provideNetworkConnectionLogicProvider.get(),
              DaggerAppComponent.this.provideMeshLogicProvider.get(),
              DaggerAppComponent.this.provideMeshNodeManagerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ControlGroupFragmentSubcomponentBuilder builder) {
      this.controlGroupModule = builder.controlGroupModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(ControlGroupFragment arg0) {
      injectControlGroupFragment(arg0);
    }

    private ControlGroupFragment injectControlGroupFragment(ControlGroupFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ControlGroupFragment_MembersInjector.injectControlGroupPresenter(
          instance, getControlGroupPresenter());
      return instance;
    }
  }
}
