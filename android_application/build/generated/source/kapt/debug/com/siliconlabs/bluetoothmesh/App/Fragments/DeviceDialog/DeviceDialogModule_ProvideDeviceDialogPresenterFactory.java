// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.DeviceDialog;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DeviceDialogModule_ProvideDeviceDialogPresenterFactory
    implements Factory<DeviceDialogPresenter> {
  private final DeviceDialogModule module;

  private final Provider<DeviceDialogView> deviceDialogViewProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  public DeviceDialogModule_ProvideDeviceDialogPresenterFactory(
      DeviceDialogModule module,
      Provider<DeviceDialogView> deviceDialogViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    this.module = module;
    this.deviceDialogViewProvider = deviceDialogViewProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
    this.meshLogicProvider = meshLogicProvider;
  }

  @Override
  public DeviceDialogPresenter get() {
    return provideInstance(
        module, deviceDialogViewProvider, networkConnectionLogicProvider, meshLogicProvider);
  }

  public static DeviceDialogPresenter provideInstance(
      DeviceDialogModule module,
      Provider<DeviceDialogView> deviceDialogViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return proxyProvideDeviceDialogPresenter(
        module,
        deviceDialogViewProvider.get(),
        networkConnectionLogicProvider.get(),
        meshLogicProvider.get());
  }

  public static DeviceDialogModule_ProvideDeviceDialogPresenterFactory create(
      DeviceDialogModule module,
      Provider<DeviceDialogView> deviceDialogViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider) {
    return new DeviceDialogModule_ProvideDeviceDialogPresenterFactory(
        module, deviceDialogViewProvider, networkConnectionLogicProvider, meshLogicProvider);
  }

  public static DeviceDialogPresenter proxyProvideDeviceDialogPresenter(
      DeviceDialogModule instance,
      DeviceDialogView deviceDialogView,
      NetworkConnectionLogic networkConnectionLogic,
      MeshLogic meshLogic) {
    return Preconditions.checkNotNull(
        instance.provideDeviceDialogPresenter(deviceDialogView, networkConnectionLogic, meshLogic),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
