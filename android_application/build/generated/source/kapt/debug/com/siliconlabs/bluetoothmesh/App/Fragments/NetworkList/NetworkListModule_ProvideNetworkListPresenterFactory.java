// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.NetworkList;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNetworkManager;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNodeManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkListModule_ProvideNetworkListPresenterFactory
    implements Factory<NetworkListPresenter> {
  private final NetworkListModule module;

  private final Provider<NetworkListView> networkListViewProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  private final Provider<MeshNetworkManager> meshNetworkManagerProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  private final Provider<MeshNodeManager> meshNodeManagerProvider;

  public NetworkListModule_ProvideNetworkListPresenterFactory(
      NetworkListModule module,
      Provider<NetworkListView> networkListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNetworkManager> meshNetworkManagerProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    this.module = module;
    this.networkListViewProvider = networkListViewProvider;
    this.meshLogicProvider = meshLogicProvider;
    this.meshNetworkManagerProvider = meshNetworkManagerProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
    this.meshNodeManagerProvider = meshNodeManagerProvider;
  }

  @Override
  public NetworkListPresenter get() {
    return provideInstance(
        module,
        networkListViewProvider,
        meshLogicProvider,
        meshNetworkManagerProvider,
        networkConnectionLogicProvider,
        meshNodeManagerProvider);
  }

  public static NetworkListPresenter provideInstance(
      NetworkListModule module,
      Provider<NetworkListView> networkListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNetworkManager> meshNetworkManagerProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return proxyProvideNetworkListPresenter(
        module,
        networkListViewProvider.get(),
        meshLogicProvider.get(),
        meshNetworkManagerProvider.get(),
        networkConnectionLogicProvider.get(),
        meshNodeManagerProvider.get());
  }

  public static NetworkListModule_ProvideNetworkListPresenterFactory create(
      NetworkListModule module,
      Provider<NetworkListView> networkListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNetworkManager> meshNetworkManagerProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return new NetworkListModule_ProvideNetworkListPresenterFactory(
        module,
        networkListViewProvider,
        meshLogicProvider,
        meshNetworkManagerProvider,
        networkConnectionLogicProvider,
        meshNodeManagerProvider);
  }

  public static NetworkListPresenter proxyProvideNetworkListPresenter(
      NetworkListModule instance,
      NetworkListView networkListView,
      MeshLogic meshLogic,
      MeshNetworkManager meshNetworkManager,
      NetworkConnectionLogic networkConnectionLogic,
      MeshNodeManager meshNodeManager) {
    return Preconditions.checkNotNull(
        instance.provideNetworkListPresenter(
            networkListView,
            meshLogic,
            meshNetworkManager,
            networkConnectionLogic,
            meshNodeManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
