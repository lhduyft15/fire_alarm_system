// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.ControlGroup;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNodeManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ControlGroupModule_ProvideControlGroupPresenterFactory
    implements Factory<ControlGroupPresenter> {
  private final ControlGroupModule module;

  private final Provider<ControlGroupView> controlGroupViewProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  private final Provider<MeshNodeManager> meshNodeManagerProvider;

  public ControlGroupModule_ProvideControlGroupPresenterFactory(
      ControlGroupModule module,
      Provider<ControlGroupView> controlGroupViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    this.module = module;
    this.controlGroupViewProvider = controlGroupViewProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
    this.meshLogicProvider = meshLogicProvider;
    this.meshNodeManagerProvider = meshNodeManagerProvider;
  }

  @Override
  public ControlGroupPresenter get() {
    return provideInstance(
        module,
        controlGroupViewProvider,
        networkConnectionLogicProvider,
        meshLogicProvider,
        meshNodeManagerProvider);
  }

  public static ControlGroupPresenter provideInstance(
      ControlGroupModule module,
      Provider<ControlGroupView> controlGroupViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return proxyProvideControlGroupPresenter(
        module,
        controlGroupViewProvider.get(),
        networkConnectionLogicProvider.get(),
        meshLogicProvider.get(),
        meshNodeManagerProvider.get());
  }

  public static ControlGroupModule_ProvideControlGroupPresenterFactory create(
      ControlGroupModule module,
      Provider<ControlGroupView> controlGroupViewProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return new ControlGroupModule_ProvideControlGroupPresenterFactory(
        module,
        controlGroupViewProvider,
        networkConnectionLogicProvider,
        meshLogicProvider,
        meshNodeManagerProvider);
  }

  public static ControlGroupPresenter proxyProvideControlGroupPresenter(
      ControlGroupModule instance,
      ControlGroupView controlGroupView,
      NetworkConnectionLogic networkConnectionLogic,
      MeshLogic meshLogic,
      MeshNodeManager meshNodeManager) {
    return Preconditions.checkNotNull(
        instance.provideControlGroupPresenter(
            controlGroupView, networkConnectionLogic, meshLogic, meshNodeManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
