// Generated by Dagger (https://google.github.io/dagger).
package com.siliconlabs.bluetoothmesh.App.Fragments.DeviceList;

import com.siliconlabs.bluetoothmesh.App.Logic.MeshLogic;
import com.siliconlabs.bluetoothmesh.App.Logic.NetworkConnectionLogic;
import com.siliconlabs.bluetoothmesh.App.Models.MeshNodeManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DeviceListModule_ProvideDeviceListPresenterFactory
    implements Factory<DeviceListPresenter> {
  private final DeviceListModule module;

  private final Provider<DeviceListView> deviceListViewProvider;

  private final Provider<MeshLogic> meshLogicProvider;

  private final Provider<NetworkConnectionLogic> networkConnectionLogicProvider;

  private final Provider<MeshNodeManager> meshNodeManagerProvider;

  public DeviceListModule_ProvideDeviceListPresenterFactory(
      DeviceListModule module,
      Provider<DeviceListView> deviceListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    this.module = module;
    this.deviceListViewProvider = deviceListViewProvider;
    this.meshLogicProvider = meshLogicProvider;
    this.networkConnectionLogicProvider = networkConnectionLogicProvider;
    this.meshNodeManagerProvider = meshNodeManagerProvider;
  }

  @Override
  public DeviceListPresenter get() {
    return provideInstance(
        module,
        deviceListViewProvider,
        meshLogicProvider,
        networkConnectionLogicProvider,
        meshNodeManagerProvider);
  }

  public static DeviceListPresenter provideInstance(
      DeviceListModule module,
      Provider<DeviceListView> deviceListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return proxyProvideDeviceListPresenter(
        module,
        deviceListViewProvider.get(),
        meshLogicProvider.get(),
        networkConnectionLogicProvider.get(),
        meshNodeManagerProvider.get());
  }

  public static DeviceListModule_ProvideDeviceListPresenterFactory create(
      DeviceListModule module,
      Provider<DeviceListView> deviceListViewProvider,
      Provider<MeshLogic> meshLogicProvider,
      Provider<NetworkConnectionLogic> networkConnectionLogicProvider,
      Provider<MeshNodeManager> meshNodeManagerProvider) {
    return new DeviceListModule_ProvideDeviceListPresenterFactory(
        module,
        deviceListViewProvider,
        meshLogicProvider,
        networkConnectionLogicProvider,
        meshNodeManagerProvider);
  }

  public static DeviceListPresenter proxyProvideDeviceListPresenter(
      DeviceListModule instance,
      DeviceListView deviceListView,
      MeshLogic meshLogic,
      NetworkConnectionLogic networkConnectionLogic,
      MeshNodeManager meshNodeManager) {
    return Preconditions.checkNotNull(
        instance.provideDeviceListPresenter(
            deviceListView, meshLogic, networkConnectionLogic, meshNodeManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
